openapi: "3.0.3"
info:
  title: "Yacht Reservation API"
  description: |
    API for yacht reservation system.
    
    ## Authentication
    Include the JWT token in the Authorization header:
    ```
    Authorization: Bearer <your-token>
    ```
  version: "1.0.0"

servers:
  - url: "http://0.0.0.0:8080"
    description: "Local development server"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Yacht:
      type: object
      required:
        - id
        - name
        - manufacturer
        - length
        - crewNum
        - price
      properties:
        id:
          type: integer
          description: Unique identifier of the yacht
        name:
          type: string
          description: Name of the yacht
        manufacturer:
          type: string
          description: Manufacturer of the yacht
        length:
          type: number
          format: double
          description: Length of the yacht in feet
        crewNum:
          type: integer
          description: Number of crew members required
        price:
          type: integer
          description: Price of the yacht in USD

    RegisterRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          description: User's password
          format: password

    RegisterResponse:
      type: object
      required:
        - jwtToken
      properties:
        jwtToken:
          type: string
          description: JWT token for authentication

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          description: User's password
          format: password

    LoginResponse:
      type: object
      required:
        - jwtToken
      properties:
        jwtToken:
          type: string
          description: JWT token for authentication

    Error:
      type: object
      properties:
        message:
          type: string
          description: Error message

paths:
  /auth/register:
    post:
      summary: Register new user
      description: Create a new user account and return JWT token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      summary: Login user
      description: Authenticate user and return JWT token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/validate-token:
    get:
      summary: Validate JWT token
      description: Check if the provided JWT token is valid
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Token is valid
        '401':
          description: Token is invalid or expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /yachts/all:
    get:
      summary: Get all yachts
      description: Retrieves a list of all available yachts
      tags:
        - Yachts
      responses:
        '200':
          description: Successfully retrieved the list of yachts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Yacht'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

security:
  - bearerAuth: []