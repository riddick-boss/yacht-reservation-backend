openapi: "3.0.3"
info:
  title: "Yacht Reservation API"
  description: |
    API for yacht reservation system.
    
    ## Authentication
    Include the JWT token in the Authorization header:
    ```
    Authorization: Bearer <your-token>
    ```
  version: "1.0.0"

servers:
  - url: "http://0.0.0.0:8080"
    description: "Local development server"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Yacht:
      type: object
      required:
        - id
        - name
        - manufacturer
        - length
        - crewNum
        - pricePerDay
        - imageUrl
        - isAvailable
      properties:
        id:
          type: integer
          description: Unique identifier of the yacht
        name:
          type: string
          description: Name of the yacht
        manufacturer:
          type: string
          description: Manufacturer of the yacht
        length:
          type: number
          format: double
          description: Length of the yacht in meters
        crewNum:
          type: integer
          description: Number of crew members required
        pricePerDay:
          type: integer
          description: Price per day in USD
        imageUrl:
          type: string
          format: uri
          description: URL to the yacht's image
        isAvailable:
          type: boolean
          description: Whether the yacht is available for reservation

    YachtsResponse:
      type: object
      required:
        - list
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/Yacht'

    RegisterRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          description: User's password
          format: password

    RegisterResponse:
      type: object
      required:
        - jwtToken
      properties:
        jwtToken:
          type: string
          description: JWT token for authentication

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          description: User's password
          format: password

    LoginResponse:
      type: object
      required:
        - jwtToken
      properties:
        jwtToken:
          type: string
          description: JWT token for authentication

    UpdateProfileRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: User's display name

    Profile:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: User's email address
        name:
          type: string
          nullable: true
          description: User's display name

    ProfileResponse:
      type: object
      required:
        - profile
      properties:
        profile:
          $ref: '#/components/schemas/Profile'

    Error:
      type: object
      properties:
        message:
          type: string
          description: Error message

    YachtReservationRequest:
      type: object
      required:
        - yachtId
        - startTime
        - endTime
      properties:
        yachtId:
          type: integer
          description: ID of the yacht to reserve
        startTime:
          type: integer
          description: Start time of the reservation (Unix timestamp)
        endTime:
          type: integer
          description: End time of the reservation (Unix timestamp)

    ReservationDto:
      type: object
      required:
        - id
        - yacht
        - startTime
        - endTime
      properties:
        id:
          type: integer
          description: Unique identifier of the reservation
        yacht:
          $ref: '#/components/schemas/Yacht'
        startTime:
          type: integer
          description: Start time of the reservation (Unix timestamp)
        endTime:
          type: integer
          description: End time of the reservation (Unix timestamp)

    ReservationsResponse:
      type: object
      required:
        - list
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/ReservationDto'

    YachtBookingRequest:
      type: object
      required:
        - yachtId
        - day
      properties:
        yachtId:
          type: integer
          description: ID of the yacht to book
        day:
          type: string
          format: date
          description: Date of the booking (YYYY-MM-DD format)

    YachtBookingDto:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the yacht

    BookingLocationDto:
      type: object
      required:
        - name
        - imageUrl
      properties:
        name:
          type: string
          description: Name of the marina location
        imageUrl:
          type: string
          format: uri
          description: URL to the location's image

    BookingDto:
      type: object
      required:
        - id
        - yacht
        - day
        - location
      properties:
        id:
          type: integer
          description: Unique identifier of the booking
        yacht:
          $ref: '#/components/schemas/YachtBookingDto'
        day:
          type: string
          format: date
          description: Date of the booking (YYYY-MM-DD format)
        location:
          $ref: '#/components/schemas/BookingLocationDto'

    BookingsResponse:
      type: object
      required:
        - list
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/BookingDto'

    YachtPromoDto:
      type: object
      required:
        - id
        - name
        - imageUrl
      properties:
        id:
          type: integer
          description: Unique identifier of the yacht
        name:
          type: string
          description: Name of the yacht
        imageUrl:
          type: string
          format: uri
          description: URL to the yacht's image

    PromoResponse:
      type: object
      required:
        - yacht
        - location
        - price
        - availableDays
      properties:
        yacht:
          $ref: '#/components/schemas/YachtPromoDto'
        location:
          type: string
          description: Name of the marina location
        price:
          type: integer
          description: Discounted price in USD
        availableDays:
          type: array
          items:
            type: string
            format: date
          description: List of available dates for the promotion (YYYY-MM-DD format)

    PromoBannerResponse:
      type: object
      required:
        - title
        - message
        - buttonText
      properties:
        title:
          type: string
          description: Title of the banner
        message:
          type: string
          description: Message content of the banner
        buttonText:
          type: string
          description: Text to display on the banner button

paths:
  /auth/register:
    post:
      summary: Register new user
      description: Create a new user account and return JWT token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      summary: Login user
      description: Authenticate user and return JWT token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/validate-token:
    get:
      summary: Validate JWT token
      description: Check if the provided JWT token is valid
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Token is valid
        '401':
          description: Token is invalid or expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /profile:
    get:
      summary: Get user profile
      description: Retrieve the profile information for the authenticated user
      tags:
        - Profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Update user profile
      description: Update the profile information for the authenticated user
      tags:
        - Profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /yachts/all:
    get:
      summary: Get all yachts
      description: Retrieves a list of all available yachts with their details including images and pricing
      tags:
        - Yachts
      responses:
        '200':
          description: Successfully retrieved the list of yachts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/YachtsResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /yachts/featured:
    get:
      summary: Get featured yachts
      description: Retrieves a curated list of featured yachts (typically 3 random yachts) for highlighting on the home page
      tags:
        - Yachts
      responses:
        '200':
          description: Successfully retrieved the list of featured yachts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/YachtsResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /bookings/book:
    post:
      summary: Create a new booking
      description: Book a yacht for a specific day
      tags:
        - Bookings
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/YachtBookingRequest'
      responses:
        '200':
          description: Booking created successfully
        '400':
          description: Invalid request, yacht not found, or yacht not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /bookings/{id}:
    delete:
      summary: Cancel a booking
      description: Delete a specific booking by ID
      tags:
        - Bookings
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the booking to cancel
      responses:
        '202':
          description: Booking cancelled successfully
        '400':
          description: Invalid booking ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found or booking not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /bookings/upcoming:
    get:
      summary: Get upcoming bookings
      description: Retrieve all upcoming bookings for the authenticated user
      tags:
        - Bookings
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved upcoming bookings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingsResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /bookings/past:
    get:
      summary: Get past bookings
      description: Retrieve all past bookings for the authenticated user
      tags:
        - Bookings
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved past bookings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingsResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /promotion/banner:
    get:
      summary: Get promotion banner
      description: Retrieve banner data for promotional content display
      tags:
        - Promotions
      responses:
        '200':
          description: Successfully retrieved banner data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromoBannerResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /promotion:
    get:
      summary: Get promotion details
      description: Retrieve detailed promotion information including yacht, location, discounted price, and available dates
      tags:
        - Promotions
      responses:
        '200':
          description: Successfully retrieved promotion details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromoResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

security:
  - bearerAuth: []